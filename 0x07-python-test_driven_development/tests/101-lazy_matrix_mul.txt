# A Test cases for 101-lazy_matrix_mul.py file


====================================================================
How to use a function called `lazy_matrix_mul` used for metrices mul
====================================================================

This module defines a function called `lazy_matrix_mul(m_a, m_b)` to multiply two metrices.


Usage
=====

A `lazy_matrix_mul(m_a, m_b)` function is a function that multiplies 2 metrices which are `m_a` and `m_b` and TypeError, ValueError exceptions will be raised if no match to requirements for multiplying 2 metrices by using imported numpy module.

Test Cases Examples
===================

:: Importing `lazy_matrix_mul` function from 101-lazy_matrix_mul.py file
>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

I. Tasting Valid cases
======================

:: Test for 2 identical matrices to a function
>>> m_a = [[1, 2], [5, 10]]
>>> m_b = m_a
>>> print(lazy_matrix_mul(m_a, m_b))
[[ 11  22]
 [ 55 110]]


:: Test of 2 matrices of diffent number of lists
>>> m_a = [[1, 2]]
>>> m_b = [[1, 2], [3, 4]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[ 7 10]]


:: Test of 2 matrices with float elements
>>> m_a = [[1.6, 2.5, -3.4], [4.30, 5.2, 6.1]]
>>> m_b = [[1.6, 2.5], [3.4, 4.33], [-5.2, 6.11]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[28.74  -5.949]
 [-7.16  70.537]]


:: Test of 2 matrices with both integer and float elements
>>> m_a = [[1.5, 2, -3], [4.5, 5, 6]]
>>> m_b = [[-1, 2], [3.5, 4], [5.1, 6.5]]
>>> print(lazy_matrix_mul(m_a, m_b))
[[-9.8 -8.5]
 [43.6 68. ]]


II. Testing Invalid cases
=========================

:: Test nothing to a function
>>> lazy_matrix_mul()
Traceback (most recent call last):
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'


:: Test for error if m_a and m_b can't be multiplied
>>> m_a = [[1, 2, 3]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
ValueError: shapes (1,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

>>> lazy_matrix_mul([[1, 2]], [[3, 4]])
Traceback (most recent call last):
ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)


:: Testing empty m_a to a function
>>> m_a = []
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)


:: Testing empty m_b to a function
>>> m_a = [[1, 2, 3]]
>>> m_b = []
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
ValueError: shapes (1,3) and (0,) not aligned: 3 (dim 1) != 0 (dim 0)


:: Testing empty lists to a function
>>> lazy_matrix_mul([[]], [[]])
Traceback (most recent call last):
ValueError: shapes (1,0) and (1,0) not aligned: 0 (dim 1) != 1 (dim 0)


:: Testing a string to a function
>>> lazy_matrix_mul("hello", [[1, 2]])
Traceback (most recent call last):
ValueError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul([[1, 2]], "hello")
Traceback (most recent call last):
ValueError: Scalar operands are not allowed, use '*' instead

>>> lazy_matrix_mul("Hello", "World")
Traceback (most recent call last):
ValueError: Scalar operands are not allowed, use '*' instead


:: Testing None to a function
>>> lazy_matrix_mul(None, None)
Traceback (most recent call last):
TypeError: Object arrays are not currently supported


:: Testing non-matrix or list to a function
>>> lazy_matrix_mul([1, 2], [[1, 2]])
Traceback (most recent call last):
ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

>>> print(lazy_matrix_mul([[1, 2]], [1, 2]))
[5]


:: Testing neither float or integer in lists to a function
>>> lazy_matrix_mul([[1, '2']], [[1, 2], [4, 7]])
Traceback (most recent call last):
TypeError: invalid data type for einsum

>>> lazy_matrix_mul([[1, 2]], [[1, 2], ['ok', '7']])
Traceback (most recent call last):
TypeError: invalid data type for einsum


:: Testing length of rows in matrix to a function
>>> lazy_matrix_mul([[1, 2], [1, 2, 3]], [[1, 2], [4, 7]])
Traceback (most recent call last):
ValueError: setting an array element with a sequence.

>>> lazy_matrix_mul([[1, 2], [1, 2]], [[1, 2], [3, 4, 5]])
Traceback (most recent call last):
	...
ValueError: setting an array element with a sequence.
