# A Test cases for 5-text_indentation.py file


====================================================================
How to use a function called `text_indentation` used to print a text
====================================================================

This module defines a function called `text_indentation(text)` for printing a text with 2 new lines after character '.' or '?' or ':'.


Usage
=====

A `text_indentation(text)` function is a function to print a text with 2 new lines after character '.' or '?' or ':' and each printed line must not be started or ended by space. The text must be a string otherwise raise TypeError exception with message "text must be a string" and no module to be imported.


Test Cases Examples
===================

:: Importing `text_indentation` function from 5-text_indentation.py file
>>> text_indentation = __import__('5-text_indentation').text_indentation

I. Tasting for Valid cases in text_indentation function
=======================================================

:: Declaration of valiable to hold tex indenation
>>> text = """Welcome to Unity Vision Technology!\nHow are you doing? Ok: I am doing fine. Bye"""
>>> text_indentation(text)
Welcome to Unity Vision Technology!
How are you doing?
<BLANKLINE>
Ok:
<BLANKLINE>
I am doing fine.
<BLANKLINE>
Bye

:: Testing a text ending with no newline
>>> text = "Goodbye!"
>>> text_indentation(text)
Goodbye!


:: Testing a text ending with newline
>>> text = "Goodbye!\n"
>>> text_indentation(text)
Goodbye!


:: Testing a text ending with dot(.) only
>>> text = "Practice makes perfect."
>>> text_indentation(text)
Practice makes perfect.
<BLANKLINE>


:: Testing a text starting with newlines and ending with dot(.) and newline
>>> text = "\n\nPractice makes perfect.\n"
>>> text_indentation(text)
<BLANKLINE>
<BLANKLINE>
Practice makes perfect.
<BLANKLINE>
<BLANKLINE>


:: Testing a text with newlines and dot(.) only
>>> text_indentation('\n\n.\n\n ')
<BLANKLINE>
<BLANKLINE>
.
<BLANKLINE>
<BLANKLINE>
<BLANKLINE>


:: Testing a text with a character, newlines and spaces only
>>> text_indentation(' \n\n  \n\n7  ')
<BLANKLINE>
<BLANKLINE>
<BLANKLINE>
<BLANKLINE>
7  


:: Testing Mixed option to a function
>>> text_indentation("Lorem ipsum dolor sit amet, consectetur adipisci"
... "ng elit. Quonam modo? Utrum igitur tibi litteram videor an totas "
... "paginas commovere? Non autem hoc: igitur ne illud quidem. Fortasse"
... " id optimum, sed ubi illud: Plus semper voluptatis? Teneo, inquit,"
... " finem illi videri nihil dolere. Transfer idem ad modestiam vel "
... "temperantiam, quae est moderatio cupiditatum rationi oboediens. "
... "Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo stadia "
... "confecimus. Sin aliud quid voles, postea. Quae animi affectio "
... "suum cuique tribuens atque hanc, quam dico. Utinam quidem "
... "dicerent alium alio beatiorem! Iam ruinas videres")
Lorem ipsum dolor sit amet, consectetur adipiscing elit.
<BLANKLINE>
Quonam modo?
<BLANKLINE>
Utrum igitur tibi litteram videor an totas paginas commovere?
<BLANKLINE>
Non autem hoc:
<BLANKLINE>
igitur ne illud quidem.
<BLANKLINE>
Fortasse id optimum, sed ubi illud:
<BLANKLINE>
Plus semper voluptatis?
<BLANKLINE>
Teneo, inquit, finem illi videri nihil dolere.
<BLANKLINE>
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
<BLANKLINE>
Si id dicis, vicimus.
<BLANKLINE>
Inde sermone vario sex illa a Dipylo stadia confecimus.
<BLANKLINE>
Sin aliud quid voles, postea.
<BLANKLINE>
Quae animi affectio suum cuique tribuens atque hanc, quam dico.
<BLANKLINE>
Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres


:: Testing indentation text started with spaces
>>> text_indentation("""    Welcome to DAM SOW TV\n   """)
Welcome to DAM SOW TV


:: Testing indentation text with only spaces
>>> text_indentation(''""    ""'')


:: Testing indentation text with nothing
>>> text_indentation('"\'')
"'


:: Testing word within single quot to a function
>>> text_indentation('Good')
Good


:: Testing a number within single quot to a function
>>> text_indentation('7')
7


II. Testing Invalid cases in text_indentation function
======================================================

:: Testing an integer to a function
>>> text_indentation(7)
Traceback (most recent call last):
TypeError: text must be a string


:: Testing a None to a function
>>> text_indentation(None)
Traceback (most recent call last):
TypeError: text must be a string


:: Testing a float to a function
>>> text_indentation(-7.0)
Traceback (most recent call last):
TypeError: text must be a string


:: Testing a word without a quotation to a function
>>> text_indentation(Good)
Traceback (most recent call last):
NameError: name 'Good' is not defined


:: Testing nothing to text_indentation function
>>> text_indentation()
Traceback (most recent call last):
TypeError: text_indentation() missing 1 required positional argument: 'text'


:: Testing more arguments to a function
>>> text_indentation("Good", "Bye")
Traceback (most recent call last):
TypeError: text_indentation() takes 1 positional argument but 2 were given
